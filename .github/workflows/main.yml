name: CI

on: push

env:
  up_tamer_commit: "b7761dcea3416bef2f4f343b9626902172eb2f6d"
  up_pyperplan_commit: "4dc20452a3f937bf6d547def5d2a579eda034f57"

jobs:
  mypy-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: MyPy check
        run: python3 -m mypy unified_planning


  run-tests-ubuntu:
    runs-on: ubuntu-latest
    needs: [mypy-check]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install tarski
        run: |
          python3 -m pip install tarski[arithmetic]
          sudo apt install -y gringo

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
            distribution: 'microsoft'
            java-version: '17'

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.9.3; ./compile; cd ..
          mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public

      - name: Run tests
        run: bash run_tests.sh

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true


  run-tests-windows:
    runs-on: windows-latest
    needs: [mypy-check]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
            distribution: 'microsoft'
            java-version: '17'

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.9.3; bash ./compile; cd ..
          bash -c "mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public"

      - name: Run tests
        run: bash run_tests.sh


  run-tests-macos:
    runs-on: macos-latest
    needs: [mypy-check]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install tarski
        run: |
          python3 -m pip install tarski[arithmetic]
          brew install gringo

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
            distribution: 'microsoft'
            java-version: '17'

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.9.3; bash ./compile; cd ..
          bash -c "mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public"

      - name: Run tests
        run: bash run_tests.sh


  check-protobuf:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Protobuf compiler
        run: sudo apt install -y protobuf-compiler && protoc --version

      - name: Check Protobuf validity
        run: cd unified_planning/grpc && protoc --python_out=generated unified_planning.proto

      - name: Check Protobuf bindings
        run: |
          echo "Checking that the committed protobuf bindings are exactly the one generated from the declaration"
          echo "Based on protoc version: $(protoc --version)"
          git diff --exit-code


  run-colab-notebooks:
    runs-on: ubuntu-latest
    needs: [mypy-check, run-tests-ubuntu, run-tests-windows, run-tests-macos, check-protobuf] # We only test colabs if the base tests were succesful

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Install jupyter and ipython3
        run: sudo apt install jupyter; sudo apt install ipython3

      - name: Run colabs
        run: bash test_colab.sh


  deploy-pypi:
    runs-on: ubuntu-latest
    needs: [mypy-check, run-tests-ubuntu, run-tests-windows, run-tests-macos, check-protobuf, run-colab-notebooks] # We only deploy if the tests were successful
    if: github.ref == 'refs/heads/master' # We only deploy on master commits

    steps:
    - name: Checkout repo
      uses: actions/checkout@master
      with:
        fetch-depth: 0

    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Make distrib
      run: |
        python3 -m pip install wheel
        bash make_distrib.sh

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
